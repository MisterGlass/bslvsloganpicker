{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Slogan","props","react_default","a","createElement","className","text","onClick","favslogan","Favorite","unfavslogan","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","logout","setState","user","responseGoogle","response","profileObj","email","split","alert","submitVote","window","confirm","favids","state","favorites","map","slogan","id","console","log","JSON","stringify","formData","FormData","append","axios","post","corsproxy","then","message","catch","messageError","submitted","key","slice","push","i","length","splice","_this2","favSlogan","_this3","unfavSlogan","_this4","style","padding","google_login_default","clientId","buttonText","onSuccess","onFailure","cookiePolicy","slogans","renderSlogan","renderFavorite","margin","backgroundColor","React","Component","App","App_Main","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44b61cd8.chunk.js","sourcesContent":["import React from 'react';\n//import ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\n//import GoogleLogout from 'react-google-login';\nimport axios from 'axios';\nimport './App.css';\n\nimport slogans from './sloganlist.json';\n\nfunction Slogan(props) {\n    return (\n        <div className=\"slogan\">\n            <p>{props.text}</p>\n            <button className=\"favbtn\" onClick={props.favslogan}>\n                Favorite\n            </button>\n        </div>\n    );\n}\n\nfunction Favorite(props) {\n    return (\n        <div className=\"slogan\">\n            <p>{props.text}</p>\n            <button className=\"unfavbtn\" onClick={props.unfavslogan}>\n                Remove\n            </button>\n        </div>\n    );\n}\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            favorites: [],\n            user: null,\n            submitted: false,\n        };\n    }\n\n    favSlogan(key, slogan) {\n        const favorites = this.state.favorites.slice();\n        favorites.push(slogan);\n        this.setState({favorites: favorites});\n    }\n\n    unfavSlogan(key, slogan) {\n        const favorites = this.state.favorites.slice();\n        for (var i = 0; i < favorites.length; i++) { \n            if (favorites[i].id === slogan.id) {\n                favorites.splice(i, 1);\n                break;\n            }\n        }\n        this.setState({favorites: favorites});\n    }\n\n    renderSlogan(key, slogan) {\n        return (\n            <Slogan key={key} text={slogan.slogan} favslogan={() => this.favSlogan(key, slogan)} />\n        )\n    }\n\n    renderFavorite(key, slogan) {\n        return (\n            <Favorite key={key} text={slogan.slogan} unfavslogan={() => this.unfavSlogan(key, slogan)} />\n        )\n    }\n\n    logout = () => {\n        this.setState({user: null});\n    }\n\n    responseGoogle = (response) => {\n        if (response.profileObj.email.split('@')[1] === 'bsideslv.org') {\n            this.setState({user: response.profileObj});\n        } else {\n            alert('Login unsucesful, please login with your bsideslv google account');\n        };\n    }\n\n    submitVote = () => {\n        if (window.confirm('Are you sure these are what you want to submit?')) {\n            var actionurl = \"https://docs.google.com/forms/d/e/1FAIpQLSfoltL6Tpy9O3C-egmhu4sgyW8QKqC1oYQvaL5mmmpOjj-GbA/formResponse\";\n            var usernamefield = \"entry.1281984272\";\n            var jsonfield = \"entry.1106511397\";\n            var corsproxy = 'https://cors-anywhere.herokuapp.com/';\n            var favids = this.state.favorites.map((slogan) => {\n                return slogan.id;\n            });\n            console.log(JSON.stringify(favids));\n\n            const formData = new FormData()\n            formData.append(usernamefield, this.state.user.email)\n            formData.append(jsonfield, JSON.stringify(favids))\n            axios.post(corsproxy + actionurl, formData)\n            .then(() => {\n                this.setState({\n                message: '',\n                email: ''\n                })\n            }).catch(() => {\n                this.setState({\n                    messageError: true,\n                })\n            })\n            \n            this.setState({submitted: true});\n        }\n    }\n\n    render() {\n        if (this.state.user == null) {\n            return (\n                <div style={{padding: \"20px\"}}>\n                    Please log in with your BSidesLV account to continue<br />\n                    <GoogleLogin\n                        clientId=\"693738722966-m2uhbrdhrsb1el7u0uiomj1lmov1bbrr.apps.googleusercontent.com\"\n                        buttonText=\"Login\"\n                        onSuccess={this.responseGoogle}\n                        onFailure={this.responseGoogle}\n                        cookiePolicy={'single_host_origin'}\n                    />\n                </div>\n            )\n        } else if (this.state.submitted) {\n            return (\n                <div style={{padding: \"20px\"}}>\n                    Thank you for submitting your slogan nominations!\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <h2>Welcome to the BSidesLV slogan nominations!</h2>\n                    <p>\n                        Every staff member is allowed to pick up to 10 for nominations. The top 10 will be put to a public vote.<br />\n                        If you like a slogan, click on favorite &amp; it will be added to your favorites list on the right. Once you are done reviewing slogans, click submit to send us your nominations.<br />\n                        Note: you can add however many slogans you like to your favorites, but if you have more than 10 you will need to remove them from your list before submitting.<br />\n                    </p>\n                    <div className=\"slogans\">\n                        {slogans.map((slogan, i) => {\n                            return this.renderSlogan(i, slogan);\n                        })}\n                    </div>\n                    <div className=\"favorites\">\n                        {this.state.favorites.map((slogan, i) => {\n                            return this.renderFavorite(i, slogan);\n                        })}\n                        {this.state.favorites.length > 0 ? (\n                            this.state.favorites.length <= 10 ? (\n                                <button className=\"submitbtn\" onClick={this.submitVote} style={{margin: \"20px\", backgroundColor: 'red'}}>\n                                    Submit\n                                </button>\n                            ) : (\n                                <h2>Too many slogans selected, please remove some to submit.</h2>\n                            )\n                        ): (\n                            <h2>Favorite some slogans</h2>\n                        ) }\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Main />\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
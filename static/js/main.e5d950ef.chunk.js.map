{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Slogan","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hideslogan","setState","hidden","unhideslogan","state","text","react_default","a","createElement","className","onClick","favorited","unfavslogan","favslogan","React","Component","Favorite","Main","_this2","mainslogans","slogans","slice","forEach","slogan","logout","user","responseGoogle","response","console","log","profileObj","email","split","alert","submitVote","window","confirm","favids","favorites","map","id","formData","FormData","append","JSON","stringify","axios","post","corsproxy","then","message","catch","messageError","submitted","key","push","i","length","splice","_this3","App_Slogan","favSlogan","unfavSlogan","_this4","_this5","style","padding","google_login_default","clientId","buttonText","onSuccess","onFailure","cookiePolicy","renderSlogan","renderFavorite","App","App_Main","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5d950ef.chunk.js","sourcesContent":["import React from 'react';\n//import ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\n//import GoogleLogout from 'react-google-login';\nimport axios from 'axios';\nimport './App.css';\n\nimport slogans from './sloganlist.json';\n\nclass Slogan extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: props.text,\n            hidden: false,\n        }\n    };\n\n    hideslogan = () => {\n        this.setState({hidden: true});\n    }\n\n    unhideslogan = () => {\n        this.setState({hidden: false});\n    }\n    \n    render() {\n        if (this.state.hidden) {\n            return (\n                <div className=\"slogan hidden\">\n                    <button className=\"unhidebtn\" onClick={this.unhideslogan}>\n                        Show\n                    </button>\n                </div>\n            );\n        } else if (this.props.favorited) {\n            return (\n                <div className=\"slogan favorite\">\n                    <p>{this.props.text}</p>\n                    <button className=\"favbtn\" onClick={this.props.unfavslogan}>\n                        Unfavorite\n                    </button>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"slogan\">\n                    <p>{this.props.text}</p>\n                    <button className=\"favbtn\" onClick={this.props.favslogan}>\n                        Favorite\n                    </button>\n                    <button className=\"hidebtn\" onClick={this.hideslogan}>\n                        Hide\n                    </button>\n                </div>\n            );\n        }\n    }\n}\n\nfunction Favorite(props) {\n    return (\n        <div className=\"slogan\">\n            <p>{props.text}</p>\n            <button className=\"unfavbtn\" onClick={props.unfavslogan}>\n                Remove\n            </button>\n        </div>\n    );\n}\n\nclass Main extends React.Component {\n    constructor(props) {\n        var mainslogans = slogans.slice();\n        mainslogans.forEach(function(slogan) {\n            slogan.favorited = false;\n        });\n\n        super(props);\n        this.state = {\n            favorites: [],\n            user: null,\n            submitted: false,\n            slogans: mainslogans,\n        };\n    }\n\n    favSlogan(key, slogan) {\n        const favorites = this.state.favorites.slice();\n        favorites.push(slogan);\n\n        const mainslogans = this.state.slogans.slice();\n        for (var i = 0; i < mainslogans.length; i++) { \n            if (mainslogans[i].id === slogan.id) {\n                mainslogans[i].favorited = true;\n                break;\n            }\n        }\n\n        this.setState({favorites: favorites, slogans: mainslogans});\n    }\n\n    unfavSlogan(key, slogan) {\n        const favorites = this.state.favorites.slice();\n        for (var i = 0; i < favorites.length; i++) { \n            if (favorites[i].id === slogan.id) {\n                favorites.splice(i, 1);\n                break;\n            }\n        }\n\n        const mainslogans = this.state.slogans.slice();\n        for (i = 0; i < mainslogans.length; i++) { \n            if (mainslogans[i].id === slogan.id) {\n                mainslogans[i].favorited = false;\n                break;\n            }\n        }\n\n        this.setState({favorites: favorites, slogans: mainslogans});\n    }\n\n    renderSlogan(key, slogan) {\n        return (\n            <Slogan \n                key={key}\n                id={slogan.id}\n                text={slogan.slogan}\n                favslogan={() => this.favSlogan(key, slogan)}\n                unfavslogan={() => this.unfavSlogan(key, slogan)}\n                favorited={slogan.favorited}\n            />\n        )\n    }\n\n    renderFavorite(key, slogan) {\n        return (\n            <Favorite key={key} text={slogan.slogan} unfavslogan={() => this.unfavSlogan(key, slogan)} />\n        )\n    }\n\n    logout = () => {\n        this.setState({user: null});\n    }\n\n    responseGoogle = (response) => {\n        console.log(response);\n        if (response.profileObj.email.split('@')[1] === 'bsideslv.org') {\n            this.setState({user: response.profileObj});\n        } else {\n            alert('Login unsucesful, please login with your bsideslv google account');\n        };\n    }\n\n    submitVote = () => {\n        if (window.confirm('Are you sure these are what you want to submit?')) {\n            var actionurl = \"https://docs.google.com/forms/d/e/1FAIpQLSfoltL6Tpy9O3C-egmhu4sgyW8QKqC1oYQvaL5mmmpOjj-GbA/formResponse\";\n            var usernamefield = \"entry.1281984272\";\n            var jsonfield = \"entry.1106511397\";\n            var corsproxy = 'https://cors-anywhere.herokuapp.com/';\n            var favids = this.state.favorites.map((slogan) => {\n                return slogan.id;\n            });\n\n            const formData = new FormData()\n            formData.append(usernamefield, this.state.user.email)\n            formData.append(jsonfield, JSON.stringify(favids))\n            axios.post(corsproxy + actionurl, formData)\n            .then(() => {\n                this.setState({\n                message: '',\n                email: ''\n                })\n            }).catch(() => {\n                this.setState({\n                    messageError: true,\n                })\n            })\n            \n            this.setState({submitted: true});\n        }\n    }\n\n    render() {\n        if (this.state.user == null) {\n            return (\n                <div style={{padding: \"20px\"}}>\n                    Please log in with your BSidesLV account to continue<br /><br />\n                    <GoogleLogin\n                        clientId=\"693738722966-m2uhbrdhrsb1el7u0uiomj1lmov1bbrr.apps.googleusercontent.com\"\n                        buttonText=\"Login\"\n                        onSuccess={this.responseGoogle}\n                        onFailure={this.responseGoogle}\n                        cookiePolicy={'single_host_origin'}\n                    />\n                </div>\n            )\n        } else if (this.state.submitted) {\n            return (\n                <div style={{padding: \"20px\"}}>\n                    Thank you for submitting your slogan nominations!\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <h2>Welcome to the BSidesLV slogan nominations!</h2>\n                    <p>\n                        Every staff member is allowed to pick up to 10 for nominations. The top 10 will be put to a public vote.<br />\n                        If you like a slogan, click on favorite &amp; it will be added to your favorites list on the right. Once you are done reviewing slogans, click submit to send us your nominations.<br />\n                        Note: you can add however many slogans you like to your favorites, but if you have more than 10 you will need to remove them from your list before submitting.<br />\n                    </p>\n                    <div className=\"slogans\">\n                        {this.state.slogans.map((slogan, i) => {\n                            return this.renderSlogan(i, slogan);\n                        })}\n                    </div>\n                    <div className=\"favorites\">\n                        {this.state.favorites.map((slogan, i) => {\n                            return this.renderFavorite(i, slogan);\n                        })}\n                        <p>You currently have selected {this.state.favorites.length} slogans.</p>\n                        {this.state.favorites.length > 0 ? (\n                            this.state.favorites.length <= 10 ? (\n                                <button className=\"submitbtn\" onClick={this.submitVote} >\n                                    Submit\n                                </button>\n                            ) : (\n                                <h2>Too many slogans selected, please remove some to submit.</h2>\n                            )\n                        ): (\n                            <h2>Choose some slogans</h2>\n                        ) }\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Main />\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}